name: KuaiLe8 Data and Analysis

on:
  schedule:
    # UTC时间23:00，对应北京时间7:00
    - cron: '0 23 * * *'
  workflow_dispatch:

jobs:
  daily_process:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 允许写入仓库内容
      actions: read    # 允许读取actions
    env:
      TZ: Asia/Shanghai # Set timezone for consistent date/time operations

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history for git operations

    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: 3.9

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Clean processed data cache
      run: |
        echo "清理缓存和临时文件..."
        rm -f kuaile8_processed.csv
        rm -f *.log
        rm -f kl8_analysis_output_*.txt.backup
        echo "缓存清理完成"

    - name: Run data acquisition script
      run: |
        echo "获取最新快乐8数据..."
        python kl8_data_processor.py
        echo "数据获取完成"

    - name: Run analysis script
      run: |
        echo "运行智能分析系统..."
        python kl8_analyzer.py
        echo "分析完成"

    - name: Run bonus calculation script
      run: |
        echo "运行奖金验证计算..."
        python kl8_bonus_calculation.py
        echo "验证计算完成"

    - name: Create fixed filename copy of latest analysis report
      run: |
        set -e
        latest_report_file=$(find . -maxdepth 1 -name 'kl8_analysis_output_*.txt' -print0 | xargs -0 ls -1 | sort -r | head -n 1)
        if [ -n "$latest_report_file" ] && [ -f "$latest_report_file" ]; then
          cp "$latest_report_file" "latest_kl8_analysis.txt"
          echo "Created fixed filename copy: latest_kl8_analysis.txt from $latest_report_file"
        else
          echo "No kl8_analysis_output_*.txt files found, or latest_report_file variable is empty. Skipping copy."
        fi

    - name: Clean old reports - keep only latest 3
      run: |
        set -e
        echo "--- Cleaning old analysis reports ---"
        mapfile -t reports < <(find . -maxdepth 1 -name 'kl8_analysis_output_*.txt' -print0 | xargs -0 ls -1 | sort)
        count=${#reports[@]}
        keep=3
        echo "Found $count reports. Configured to keep $keep latest."
        if [ "$count" -gt "$keep" ]; then
          num_to_delete=$((count - keep))
          echo "Deleting $num_to_delete oldest reports:"
          for i in $(seq 0 $((num_to_delete - 1))); do
            report_to_delete="${reports[$i]}"
            if [ -f "$report_to_delete" ]; then
              echo "Removing: $report_to_delete"
              rm "$report_to_delete"
            else
              echo "Skipping (not found): $report_to_delete"
            fi
          done
        else
          echo "No cleanup needed. $count report(s) found (≤ $keep)."
        fi
        echo "Listing remaining analysis reports:"
        find . -maxdepth 1 -name 'kl8_analysis_output_*.txt' | sort
        echo "--- Finished cleaning reports ---"

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Commit updated files
      run: |
        set -e
        echo "--- Staging and Committing Files ---"
        git add -u
        files_to_commit=(
          "kuaile8.csv"
          "latest_kl8_analysis.txt"
          "latest_kl8_calculation.txt"
          "weights_config.json"
        )
        for file_path in "${files_to_commit[@]}"; do
          if [ -f "$file_path" ]; then
            git add "$file_path"
            echo "Staged: $file_path"
          else
            echo "Skipping (not found): $file_path"
          fi
        done
        
        # 同时添加最新的时间戳分析报告文件
        latest_timestamped_report=$(find . -maxdepth 1 -name 'kl8_analysis_output_*.txt' -print0 | xargs -0 ls -1 | sort -r | head -n 1)
        if [ -n "$latest_timestamped_report" ] && [ -f "$latest_timestamped_report" ]; then
          git add "$latest_timestamped_report"
          echo "Staged latest timestamped report: $latest_timestamped_report"
        fi
        echo "Current git status:"
        git status --porcelain
        if git diff --staged --quiet; then
          echo "No changes to commit."
        else
          git commit -m "Auto update: KuaiLe8 Data and Analysis results $(date +'%Y-%m-%d %H:%M:%S %Z')"
          echo "Changes committed."
        fi
        echo "--- Finished Staging and Committing ---"

    - name: Pull remote changes to sync before push
      run: |
        echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
        echo "Target branch from GITHUB_REF_NAME: ${{ github.ref_name }}"
        git config pull.rebase false
        git pull origin ${{ github.ref_name }} --no-edit
        echo "Successfully pulled and merged remote changes (if any)."

    - name: Push changes
      run: |
        # 检查是否有更改需要推送
        if git diff --quiet HEAD~1 HEAD 2>/dev/null || [ -z "$(git log origin/${{ github.ref_name }}..HEAD 2>/dev/null)" ]; then
          echo "No changes to push."
        else
          echo "Pushing changes to remote repository..."
          # 使用内置的git命令推送，确保使用正确的token
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push origin ${{ github.ref_name }}
          echo "Changes pushed successfully to ${{ github.ref_name }}"
        fi

    - name: Send WeChat notification
      run: |
        echo "发送微信推送通知..."
        python kl8_wxpusher.py
        echo "推送通知完成"
      continue-on-error: true
